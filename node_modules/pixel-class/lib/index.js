"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var deffy = require("deffy");

module.exports = function () {
    /**
     * PixelClass
     * A tiny class for pixel manipulation.
     *
     * @name PixelClass
     * @function
     * @param {Number|Object} r The *red* value of the pixel (0-255) or an object containing the `r`, `g`, `b`, `a` fields.
     * @param {Number} g The *green* value of the pixel (0-255).
     * @param {Number} b The *blue* value of the pixel (0-255).
     * @param {Number} a The *alpha* (opacity) value of the pixel. If greater
     * then `1`, it will be normalized to a value between `0` and `1`. Defaults
     * to `1`.
     * @return {PixelClass} The `PixelClass` instance.
     */
    function PixelClass(r, g, b, a) {
        _classCallCheck(this, PixelClass);

        if ((typeof r === "undefined" ? "undefined" : _typeof(r)) === "object") {
            g = r.g;
            b = r.b;
            a = r.a;
            r = r.r;
        }

        this.r = r;
        this.g = g;
        this.b = b;

        if (a > 1) {
            a /= 100;
        }

        this.a = deffy(a, 1);
    }

    /**
     * intensity
     * Calculates the pixel intensity.
     *
     * @name intensity
     * @function
     * @return {Number} The pixel intensity (0-255).
     */


    _createClass(PixelClass, [{
        key: "intensity",
        value: function intensity() {
            return (this.r + this.g + this.b) * this.a;
        }
    }]);

    return PixelClass;
}();